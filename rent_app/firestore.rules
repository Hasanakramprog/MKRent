rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && 
             resource != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isChatParticipant() {
      return isSignedIn() && 
             resource != null && 
             request.auth.uid in resource.data.participantIds;
    }
    
    function isNewChatParticipant() {
      return isSignedIn() && 
             request.auth.uid in request.resource.data.participantIds;
    }
    
    // Chat Rules
    match /chats/{chatId} {
      // Read: Only participants can read their chats, admins can read all
      allow read: if isSignedIn() && (isChatParticipant() || isAdmin());
      
      // Create: User can create chat if they are a participant
      allow create: if isSignedIn() && 
                   isNewChatParticipant() &&
                   request.resource.data.participantIds.size() == 2 &&
                   request.auth.uid in request.resource.data.participantIds;
      
      // Update: Only participants can update chat (for read timestamps, last message, etc.)
      allow update: if isSignedIn() && (isChatParticipant() || isAdmin()) &&
                   // Ensure participantIds are not modified
                   request.resource.data.participantIds == resource.data.participantIds;
      
      // Delete: Only admins can delete chats
      allow delete: if isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        // Read: Only chat participants can read messages
        allow read: if isSignedIn() && 
                   (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds ||
                    isAdmin());
        
        // Create: Only chat participants can send messages
        allow create: if isSignedIn() && 
                     request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds &&
                     request.resource.data.senderId == request.auth.uid &&
                     request.resource.data.chatId == chatId;
        
        // Update: Only message sender can edit their own messages, or admins
        allow update: if isSignedIn() && 
                     (request.resource.data.senderId == request.auth.uid || isAdmin()) &&
                     // Ensure core fields are not modified
                     request.resource.data.senderId == resource.data.senderId &&
                     request.resource.data.chatId == resource.data.chatId &&
                     request.resource.data.timestamp == resource.data.timestamp;
        
        // Delete: Only message sender or admins can delete messages
        allow delete: if isSignedIn() && 
                     (resource.data.senderId == request.auth.uid || isAdmin());
      }
    }
    
    // Users collection (for user profiles and roles)
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isOwner(userId);
    }
    
    // Marketplace listings (existing rules - ensure they allow reading for chat integration)
    match /marketplace_listings/{listingId} {
      allow read: if true; // Public read for product sharing in chats
      allow write: if isSignedIn() && 
                  (request.resource.data.sellerId == request.auth.uid || isAdmin());
    }
    
    // Categories (existing rules)
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Products (rent app - existing rules)
    match /products/{productId} {
      allow read: if true;
      allow write: if isSignedIn();
    }
    
    // FCM Tokens (for push notifications)
    match /fcm_tokens/{tokenId} {
      allow read, write: if isSignedIn() && 
                        request.resource.data.userId == request.auth.uid;
    }
    
    // Chat reports (for moderation)
    match /chat_reports/{reportId} {
      allow read: if isAdmin();
      allow create: if isSignedIn() && 
                   request.resource.data.reporterId == request.auth.uid;
      allow update, delete: if isAdmin();
    }
  }
}
